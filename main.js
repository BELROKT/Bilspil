// Generated by Haxe 3.4.7
(function () { "use strict";
var CarAction = { __ename__ : true, __constructs__ : ["Forward","Reverse","Right","Left"] };
CarAction.Forward = ["Forward",0];
CarAction.Forward.__enum__ = CarAction;
CarAction.Reverse = ["Reverse",1];
CarAction.Reverse.__enum__ = CarAction;
CarAction.Right = ["Right",2];
CarAction.Right.__enum__ = CarAction;
CarAction.Left = ["Left",3];
CarAction.Left.__enum__ = CarAction;
var Car = function() {
	this.color = "";
	this.friction = 0.05;
	this.turnAngle = 0.0;
	this.turnSpeed = 0.01;
	this.reverseAcceleration = 0.3;
	this.forwardAcceleration = 0.5;
	this.velocity = new Vector(0,0);
	this.maxVelocityReverse = 4.0;
	this.maxVelocityForward = 8.0;
	this.angle = 0.5 * Math.PI;
	this.lengthWheels = 8;
	this.widthWheels = 4;
	this.length = 40;
	this.width = 24;
	this.position = new Vector(0,0);
};
Car.__name__ = true;
Car.prototype = {
	draw: function(context) {
		context.save();
		context.translate(this.position.x,this.position.y);
		context.rotate(this.angle);
		this.drawWheel(context,-0.3 * this.length,-0.5 * this.width,0);
		this.drawWheel(context,-0.3 * this.length,0.5 * this.width,0);
		this.drawWheel(context,0.3 * this.length,-0.5 * this.width,this.turnAngle);
		this.drawWheel(context,0.3 * this.length,0.5 * this.width,this.turnAngle);
		context.fillStyle = this.color;
		context.fillRect(-0.5 * this.length,-0.5 * this.width,this.length,this.width);
		context.restore();
	}
	,drawWheel: function(context,x,y,angle) {
		context.save();
		context.translate(x,y);
		context.rotate(angle);
		context.fillStyle = "black";
		context.fillRect(-0.5 * this.lengthWheels,-0.5 * this.widthWheels,this.lengthWheels,this.widthWheels);
		context.restore();
	}
	,capSpeed: function(maxVelocity) {
		if(this.velocity.length() > maxVelocity) {
			this.velocity = this.velocity.unityVector().multiply(maxVelocity);
		}
	}
	,updatePosition: function() {
		this.position = this.position.add(this.velocity);
	}
	,controlInput: function(actions) {
		this.turnAngle = 0;
		var _g = 0;
		while(_g < actions.length) {
			var action = actions[_g];
			++_g;
			this.handleAction(action);
		}
	}
	,handleAction: function(action) {
		if(action == CarAction.Forward) {
			this.forward();
		}
		if(action == CarAction.Reverse) {
			this.reverse();
		}
		if(action == CarAction.Left) {
			this.left();
		}
		if(action == CarAction.Right) {
			this.right();
		}
	}
	,forward: function() {
		this.velocity = this.velocity.add(Vector.fromAngle(this.angle).multiply(this.forwardAcceleration));
		this.capSpeed(this.maxVelocityForward);
	}
	,reverse: function() {
		var accelerationVector = Vector.fromAngle(this.angle + Math.PI).multiply(this.reverseAcceleration);
		this.velocity = this.velocity.add(accelerationVector);
		if(this.velocity.x * accelerationVector.x > 0 && this.velocity.y * accelerationVector.y > 0) {
			this.capSpeed(this.maxVelocityReverse);
		} else {
			this.capSpeed(this.maxVelocityForward);
		}
	}
	,left: function() {
		this.turnAngle -= 0.3;
		this.turn(-1);
	}
	,right: function() {
		this.turnAngle += 0.3;
		this.turn(1);
	}
	,turn: function(direction) {
		var relativeVelocity = this.getRelativeVelocity();
		if(relativeVelocity.x > 0) {
			this.angle += this.turnSpeed * direction * this.velocity.length();
		}
		if(relativeVelocity.x < 0) {
			this.angle -= this.turnSpeed * direction * this.velocity.length();
		}
		this.velocity = Vector.fromAngle(this.angle).multiply(relativeVelocity.x);
	}
	,applyFriction: function() {
		this.velocity = this.velocity.subtract(this.velocity.unityVector().multiply(this.friction));
		if(this.velocity.length() < this.friction) {
			this.velocity = new Vector(0,0);
		}
	}
	,getRelativeVelocity: function() {
		if(this.velocity.length() == 0) {
			return new Vector(0,0);
		}
		var temp = this.velocity.scalarProduct(Vector.fromAngle(this.angle)) / this.velocity.length();
		if(temp > 1) {
			temp = 1;
		}
		if(temp < -1) {
			temp = -1;
		}
		var relativeVelocity = Vector.fromAngle(Math.acos(temp)).multiply(this.velocity.length());
		if(isNaN(relativeVelocity.x)) {
			console.log("x: " + this.velocity.x + " y: " + this.velocity.y);
			console.log(temp);
		}
		return relativeVelocity;
	}
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d",null);
	context.fillRect(345,5,657,123);
	window.document.body.appendChild(canvas);
	canvas.width = window.innerWidth;
	canvas.height = window.innerHeight;
	canvas.style.backgroundColor = "olivedrab";
	window.onresize = function() {
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;
	};
	var pressedKeys = new haxe_ds_StringMap();
	var car1 = new Car();
	var car2 = new Car();
	car1.color = "#800000";
	car2.color = "#434ea1";
	car1.position = new Vector(600,300);
	car2.position = new Vector(550,300);
	window.addEventListener("keyup",function(event) {
		var k = event.key;
		if(__map_reserved[k] != null) {
			pressedKeys.setReserved(k,false);
		} else {
			pressedKeys.h[k] = false;
		}
	});
	window.addEventListener("keydown",function(event1) {
		var k1 = event1.key;
		if(__map_reserved[k1] != null) {
			pressedKeys.setReserved(k1,true);
		} else {
			pressedKeys.h[k1] = true;
		}
	});
	var controlCar = function(car,up,left,down,right) {
		var actions = [];
		if(__map_reserved[up] != null ? pressedKeys.getReserved(up) : pressedKeys.h[up]) {
			actions.push(CarAction.Forward);
		}
		if(__map_reserved[down] != null ? pressedKeys.getReserved(down) : pressedKeys.h[down]) {
			actions.push(CarAction.Reverse);
		}
		if(__map_reserved[left] != null ? pressedKeys.getReserved(left) : pressedKeys.h[left]) {
			actions.push(CarAction.Left);
		}
		if(__map_reserved[right] != null ? pressedKeys.getReserved(right) : pressedKeys.h[right]) {
			actions.push(CarAction.Right);
		}
		car.controlInput(actions);
	};
	var gameLoop = function() {
		controlCar(car1,"ArrowUp","ArrowLeft","ArrowDown","ArrowRight");
		controlCar(car2,"w","a","s","d");
		car1.applyFriction();
		car2.applyFriction();
		car1.updatePosition();
		car2.updatePosition();
		context.clearRect(0,0,canvas.width,canvas.height);
		car1.draw(context);
		car2.draw(context);
	};
	new haxe_Timer(30).run = gameLoop;
};
Math.__name__ = true;
var Vector = function(X,Y) {
	this.y = 0.0;
	this.x = 0.0;
	this.x = X;
	this.y = Y;
};
Vector.__name__ = true;
Vector.fromAngle = function(angle) {
	var newVector = new Vector(0,0);
	newVector.x = Math.cos(angle);
	newVector.y = Math.sin(angle);
	return newVector;
};
Vector.prototype = {
	add: function(vector) {
		var newVector = new Vector(0,0);
		newVector.x = this.x + vector.x;
		newVector.y = this.y + vector.y;
		return newVector;
	}
	,subtract: function(vector) {
		var newVector = new Vector(0,0);
		newVector.x = this.x - vector.x;
		newVector.y = this.y - vector.y;
		return newVector;
	}
	,multiply: function(scalar) {
		var newVector = new Vector(0,0);
		newVector.x = this.x * scalar;
		newVector.y = this.y * scalar;
		return newVector;
	}
	,divide: function(scalar) {
		var newVector = new Vector(0,0);
		newVector.x = this.x / scalar;
		newVector.y = this.y / scalar;
		return newVector;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,unityVector: function() {
		if(this.length() == 0) {
			return new Vector(0,0);
		}
		return this.divide(this.length());
	}
	,scalarProduct: function(vector) {
		return this.x * vector.x + this.y * vector.y;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
Main.main();
})();
