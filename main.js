// Generated by Haxe 3.4.7
(function () { "use strict";
var Car = function() {
	this.color = "";
	this.reverseAcceleration = 0.3;
	this.turnReverseSpeed = Math.PI / 64;
	this.turnForwardSpeed = Math.PI / 48;
	this.forwardAcceleration = 0.5;
	this.speedY = 0.0;
	this.speedX = 0.0;
	this.maxSpeed = 3;
	this.angle = 0.5 * Math.PI;
	this.lengthWheels = 8;
	this.widthWheels = 32;
	this.length = 40;
	this.width = 24;
	this.y = 300.0;
	this.x = 500.0;
};
Car.prototype = {
	draw: function(context) {
		context.save();
		context.translate(this.x,this.y);
		context.rotate(this.angle);
		context.fillStyle = "black";
		context.fillRect(-0.4 * this.length,-0.66666666666666663 * this.width,this.lengthWheels,this.widthWheels);
		context.fillRect(0.2 * this.length,-0.66666666666666663 * this.width,this.lengthWheels,this.widthWheels);
		context.fillStyle = this.color;
		context.fillRect(-0.5 * this.length,-0.5 * this.width,this.length,this.width);
		context.restore();
	}
	,capSpeed: function() {
		if(this.speedX > this.maxSpeed) {
			this.speedX = this.maxSpeed;
		}
		if(this.speedX < -this.maxSpeed) {
			this.speedX = -this.maxSpeed;
		}
		if(this.speedY > this.maxSpeed) {
			this.speedY = this.maxSpeed;
		}
		if(this.speedY < -this.maxSpeed) {
			this.speedY = -this.maxSpeed;
		}
	}
	,updatePosition: function() {
		this.x += this.speedX;
		this.y += this.speedY;
	}
	,forward: function() {
		this.speedX += this.forwardAcceleration * Math.cos(this.angle);
		this.speedY += this.forwardAcceleration * Math.sin(this.angle);
		this.capSpeed();
	}
	,forwardLeft: function() {
		this.speedX += this.forwardAcceleration * Math.cos(this.angle);
		this.speedY += this.forwardAcceleration * Math.sin(this.angle);
		this.angle -= this.turnForwardSpeed;
		this.capSpeed();
	}
	,forwardRight: function() {
		this.speedX += this.forwardAcceleration * Math.cos(this.angle);
		this.speedY += this.forwardAcceleration * Math.sin(this.angle);
		this.angle += this.turnForwardSpeed;
		this.capSpeed();
	}
	,reverse: function() {
		this.speedX += this.reverseAcceleration * Math.cos(this.angle + Math.PI);
		this.speedY += this.reverseAcceleration * Math.sin(this.angle + Math.PI);
		this.capSpeed();
	}
	,reverseLeft: function() {
		this.speedX += this.reverseAcceleration * Math.cos(this.angle + Math.PI);
		this.speedY += this.reverseAcceleration * Math.sin(this.angle + Math.PI);
		this.angle += this.turnReverseSpeed;
		this.capSpeed();
	}
	,reverseRight: function() {
		this.speedX += this.reverseAcceleration * Math.cos(this.angle + Math.PI);
		this.speedY += this.reverseAcceleration * Math.sin(this.angle + Math.PI);
		this.angle -= this.turnReverseSpeed;
		this.capSpeed();
	}
};
var Main = function() { };
Main.main = function() {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d",null);
	context.fillRect(345,5,657,123);
	window.document.body.appendChild(canvas);
	canvas.width = window.innerWidth;
	canvas.height = window.innerHeight;
	canvas.style.backgroundColor = "olivedrab";
	window.onresize = function() {
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;
	};
	var pressedKeys = new haxe_ds_StringMap();
	var car1 = new Car();
	var car2 = new Car();
	car1.color = "#800000";
	car2.color = "#434ea1";
	car1.x = 600;
	car2.x = 550;
	window.addEventListener("keyup",function(event) {
		var k = event.key;
		if(__map_reserved[k] != null) {
			pressedKeys.setReserved(k,false);
		} else {
			pressedKeys.h[k] = false;
		}
	});
	window.addEventListener("keydown",function(event1) {
		var k1 = event1.key;
		if(__map_reserved[k1] != null) {
			pressedKeys.setReserved(k1,true);
		} else {
			pressedKeys.h[k1] = true;
		}
	});
	var controlCar = function(car,up,left,down,right) {
		if(__map_reserved[up] != null ? pressedKeys.getReserved(up) : pressedKeys.h[up]) {
			if(__map_reserved[left] != null ? pressedKeys.getReserved(left) : pressedKeys.h[left]) {
				car.forwardLeft();
			} else if(__map_reserved[right] != null ? pressedKeys.getReserved(right) : pressedKeys.h[right]) {
				car.forwardRight();
			} else {
				car.forward();
			}
		}
		if(__map_reserved[down] != null ? pressedKeys.getReserved(down) : pressedKeys.h[down]) {
			if(__map_reserved[left] != null ? pressedKeys.getReserved(left) : pressedKeys.h[left]) {
				car.reverseLeft();
			} else if(__map_reserved[right] != null ? pressedKeys.getReserved(right) : pressedKeys.h[right]) {
				car.reverseRight();
			} else {
				car.reverse();
			}
		}
	};
	var gameLoop = function() {
		controlCar(car1,"ArrowUp","ArrowLeft","ArrowDown","ArrowRight");
		controlCar(car2,"w","a","s","d");
		car1.updatePosition();
		car2.updatePosition();
		context.clearRect(0,0,canvas.width,canvas.height);
		car1.draw(context);
		car2.draw(context);
	};
	new haxe_Timer(30).run = gameLoop;
};
var haxe_IMap = function() { };
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.prototype = {
	run: function() {
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
};
var __map_reserved = {};
Main.main();
})();
