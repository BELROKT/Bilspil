// Generated by Haxe 3.4.7
(function () { "use strict";
var Car = function() {
	this.y = 300;
	this.x = 550;
};
Car.prototype = {
	draw: function(context) {
		context.fillStyle = "red";
		context.fillRect(this.x,this.y,20,20);
	}
};
var Main = function() { };
Main.main = function() {
	console.log("Hello, world!");
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d",null);
	context.fillRect(345,5,657,123);
	window.document.body.appendChild(canvas);
	canvas.width = window.innerWidth;
	canvas.height = window.innerHeight;
	canvas.style.backgroundColor = "black";
	window.onresize = function() {
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;
	};
	var pressedKeys = new haxe_ds_StringMap();
	var car = new Car();
	window.addEventListener("keyup",function(event) {
		var k = event.key;
		if(__map_reserved[k] != null) {
			pressedKeys.setReserved(k,false);
		} else {
			pressedKeys.h[k] = false;
		}
	});
	window.addEventListener("keydown",function(event1) {
		var k1 = event1.key;
		if(__map_reserved[k1] != null) {
			pressedKeys.setReserved(k1,true);
		} else {
			pressedKeys.h[k1] = true;
		}
	});
	var gameLoop = function() {
		if(__map_reserved["ArrowUp"] != null ? pressedKeys.getReserved("ArrowUp") : pressedKeys.h["ArrowUp"]) {
			car.y -= 5;
		}
		if(__map_reserved["ArrowLeft"] != null ? pressedKeys.getReserved("ArrowLeft") : pressedKeys.h["ArrowLeft"]) {
			car.x -= 5;
		}
		if(__map_reserved["ArrowDown"] != null ? pressedKeys.getReserved("ArrowDown") : pressedKeys.h["ArrowDown"]) {
			car.y += 5;
		}
		if(__map_reserved["ArrowRight"] != null ? pressedKeys.getReserved("ArrowRight") : pressedKeys.h["ArrowRight"]) {
			car.x += 5;
		}
		context.fillStyle = "black";
		context.fillRect(0,0,canvas.width,canvas.height);
		car.draw(context);
	};
	new haxe_Timer(30).run = gameLoop;
};
var haxe_IMap = function() { };
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.prototype = {
	run: function() {
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
};
var __map_reserved = {};
Main.main();
})();
